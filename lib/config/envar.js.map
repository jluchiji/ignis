{"version":3,"sources":["config/envar.js"],"names":[],"mappings":";;;;;;;;;;;;qBAkBwB,GAAG;;;;;qBAXH,OAAO;;;;AAC/B,IAAO,KAAK,GAAG,wBAAM,aAAa,CAAC,CAAC;;;;;;;;;;;AAUrB,SAAS,GAAG,CAAC,MAAM,EAAE;;;;;AAClC,QAAM,CACH,IAAI,CAAC,MAAM,CAAC,CACZ,OAAO,CAAC,UAAA,GAAG,EAAI;AACd,QAAI,OAAO,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,WAAW,EAAE;AAC3C,WAAK,sCAAoC,GAAG,CAAG,CAAC;AAChD,YAAK,IAAI,CAAC,gBAAgB,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,WAAW,EAAE,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;KACtE,MAAM;AACL,YAAK,MAAM,UAAQ,GAAG,EAAI,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;KAC7C;GACF,CAAC,CAAC;CACN","file":"config/envar.js","sourcesContent":["/**\n * config/envar.js\n *\n * @author  Denis-Luchkin-Zhou\n * @license MIT\n */\n\nimport Debug       from 'debug';\nconst  debug = Debug('ignis:envar');\n\n/**\n * env(1)\n *\n * @description                Import specified environment variables into the\n *                             Ignis config.\n * @param          {fields}    Object whose keys are envar names, and values\n *                             are string descriptions of the parameter.\n */\nexport default function env(fields) {\n  Object\n    .keys(fields)\n    .forEach(key => {\n      if (typeof process.env[key] === 'undefined') {\n        debug(`Ignis::config::envar(): Missing ${key}`);\n        this.emit('config.missing', { name: key, description: fields[key] });\n      } else {\n        this.config(`env.${key}`, process.env[key]);\n      }\n    });\n}\n"],"sourceRoot":"/source/"}