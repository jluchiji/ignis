{"version":3,"sources":["config/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;sBAOwB,QAAQ;;;;qBACR,OAAO;;;;yBACP,YAAY;;oBAEZ,QAAQ;;;;qBACR,SAAS;;;;AAEjC,IAAM,KAAK,GAAG,wBAAM,cAAc,CAAC,CAAC;;;;;AAKpC,IAAM,OAAO,GAAG,uBAAO,sBAAsB,CAAC,CAAC;;;;;;;;;;;;AAWxC,SAAS,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE;AAClC,MAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;AAC1B,MAAI,GAAG,GAAG,oBAAE,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;;;AAG7B,MAAI,OAAO,KAAK,KAAK,WAAW,EAAE;;AAEhC,QAAI,OAAO,GAAG,KAAK,WAAW,EAAE;AAC9B,YAAM,IAAI,KAAK,sBAAmB,IAAI,wBAAoB,CAAC;KAC5D;AACD,WAAO,GAAG,CAAC;GACZ;;;AAGD,sBAAE,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;AAC1B,OAAK,gCAA8B,IAAI,CAAG,CAAC;AAC3C,MAAI,CAAC,IAAI,CACP,AAAC,OAAO,GAAG,KAAK,WAAW,GAAI,YAAY,GAAG,iBAAiB,EAC/D;AACE,QAAI,EAAM,IAAI;AACd,YAAQ,EAAE,GAAG;AACb,YAAQ,EAAE,KAAK;GAChB,CACF,CAAC;AACF,SAAO,IAAI,CAAC;CACb;;;;;;AAMM,SAAS,IAAI,GAAG;AACrB,MAAI,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACpC,MAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,MAAI,CAAC,MAAM,CAAC,GAAG,GAAG,mBAAM,IAAI,CAAC,IAAI,CAAC,CAAC;AACnC,MAAI,CAAC,MAAM,CAAC,IAAI,GAAG,kBAAK,IAAI,CAAC,IAAI,CAAC,CAAC;CACpC;;;;;;qBAKc,UAAS,KAAK,EAAE;AAC7B,OAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;CAClB","file":"config/index.js","sourcesContent":["/**\n * config/index.js\n *\n * @author  Denis Luchkin-Zhou <denis@ricepo.com>\n * @license MIT\n */\n\nimport _           from 'lodash';\nimport Debug       from 'debug';\nimport { symbol }  from 'ignis-util';\n\nimport File        from './file';\nimport Envar       from './envar';\n\nconst debug = Debug('ignis:config');\n\n/*!\n * Export symbols used by config(2).\n */\nconst __store = symbol('Ignis::config::store');\n\n/**\n * config(2)\n *\n * @description                Sets the configuration value if one is provided;\n *                             Otherwise returns the configuration value.\n * @param          {name}      Name of the configuration to get/set.\n * @param          {value}     [Optional] Value of the configuration to set.\n * @returns                    {this} for set; config value for get.\n */\nexport function config(name, value) {\n  let store = this[__store];\n  let old = _.get(store, name);\n\n  /* Get config value if available */\n  if (typeof value === 'undefined') {\n    /* Always check that config exists */\n    if (typeof old === 'undefined') {\n      throw new Error(`Config option '${name}' is not defined.`);\n    }\n    return old;\n  }\n\n  /* Otherwise, set the config value */\n  _.set(store, name, value);\n  debug(`Ignis::config(): Modified ${name}`);\n  this.emit(\n    (typeof old === 'undefined') ? 'config.set' : 'config.modified',\n    {\n      name:     name,\n      oldValue: old,\n      newValue: value\n    }\n  );\n  return this;\n}\n\n\n/*!\n * Initializer\n */\nexport function init() {\n  this[__store] = Object.create(null);\n  this.config = config;\n  this.config.env = Envar.bind(this);\n  this.config.file = File.bind(this);\n}\n\n/*!\n * Ignis.js extension\n */\nexport default function(Ignis) {\n  Ignis.init(init);\n}\n"],"sourceRoot":"/source/"}