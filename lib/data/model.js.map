{"version":3,"sources":["data/model.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;sBAOwB,QAAQ;;;;qBACR,OAAO;;;;wBACP,UAAU;;;;yBACV,YAAY;;;;;AAKpC,IAAO,KAAK,GAAO,wBAAM,aAAa,CAAC,CAAC;;;;;AAMjC,IAAM,QAAQ,GAAG,uBAAO,qBAAqB,CAAC,CAAC;;;;;;;;;;;;;AAY/C,SAAS,KAAK,CAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE;AAC5C,MAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;;;AAG3B,MAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;AAClC,QAAI,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC7B,QAAI,CAAC,MAAM,EAAE;AAAE,YAAM,IAAI,KAAK,uBAAqB,IAAI,CAAG,CAAC;KAAE;AAC7D,WAAO,MAAM,CAAC;GACf;;;AAGD,MAAI,CAAC,IAAI,CAAC,YAAW;;;;;AACnB,QAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAC9B,QAAI,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;AAAE,YAAM,IAAI,KAAK,4BAA0B,IAAI,CAAG,CAAC;KAAE;;AAE1E,SAAK,+BAA6B,IAAI,CAAG,CAAC;AAC1C,QAAI,IAAI,GAAK,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;;AAEjC,WAAO,sBACJ,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CACvC,IAAI,CAAC,UAAA,MAAM,EAAI;AACd,YAAM,GAAG,MAAM,IAAI,IAAI,CAAC;;;AAGxB,YAAM,CAAC,IAAI,GAAG,UAAC,KAAK,EAAE,IAAI,EAAK;AAC7B,cAAK,IAAI,YAAU,IAAI,SAAI,KAAK,EAAI,IAAI,CAAC,CAAC;OAC3C,CAAC;;;AAGF,WAAK,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;KACzB,CAAC,CAAC;GACN,CAAC,CAAC;;AAEH,SAAO,IAAI,CAAC;CACb","file":"data/model.js","sourcesContent":["/**\n * data/model.js\n *\n * @author  Denis Luchkin-Zhou <denis@ricepo.com>\n * @license MIT\n */\n\nimport _           from 'lodash';\nimport Debug       from 'debug';\nimport Bluebird    from 'bluebird';\nimport { symbol }  from 'ignis-util';\n\n/*!\n * Debug logger.\n */\nconst  debug     = Debug('ignis:model');\n\n\n/*!\n * Export symbols used by model(2)\n */\nexport const __models = symbol('Ignis::data::models');\n\n\n/**\n * model(2)\n *\n * @description                Gets/sets a model of the ignis.js\n * @param          {name}      Name of the model.\n * @param          {source}    (optional) Name of the data source.\n * @param          {callback}  (optional) Callback that returns a model object.\n * @returns        {model}     Resulting model object.\n */\nexport function model(name, source, callback) {\n  let store = this[__models];\n\n  /* Get the model with the specified name if callback is not specified. */\n  if (typeof callback !== 'function') {\n    let result = store.get(name);\n    if (!result) { throw new Error(`Model not found: ${name}`); }\n    return result;\n  }\n\n  /* Otherwise, create a new model. */\n  this.wait(function() {\n    let src = this.source(source);\n    if (store.get(name)) { throw new Error(`Model already exists: ${name}`); }\n\n    debug(`Ignis::model(): Creating ${name}`);\n    let that   = Object.create(null);\n\n    return Bluebird\n      .resolve(callback.call(that, this, src))\n      .then(result => {\n        result = result || that;\n\n        /* Allow models to emit events */\n        result.emit = (event, args) => {\n          this.emit(`model.${name}.${event}`, args);\n        };\n\n        /* Save the model for later use. */\n        store.set(name, result);\n      });\n  });\n\n  return this;\n}\n"],"sourceRoot":"/source/"}