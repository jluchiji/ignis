{"version":3,"sources":["data/source.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;qBAOwB,OAAO;;;;qBACP,OAAO;;;;wBACP,UAAU;;;;AAElC,IAAO,KAAK,GAAO,wBAAM,mBAAmB,CAAC,CAAC;;;;;AAKvC,IAAM,SAAS,GAAG,MAAM,CAAC,sBAAsB,CAAC,CAAC;;;;;;;;;;;;;;;AAcjD,SAAS,MAAM,CAAC,IAAI,EAAE,QAAQ,EAAW;oCAAN,IAAI;AAAJ,QAAI;;;AAC5C,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;;;AAG9B,MAAI,CAAC,QAAQ,EAAE;AACb,QAAM,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC/B,QAAI,CAAC,MAAM,EAAE;AAAE,YAAM,IAAI,KAAK,6BAA2B,IAAI,CAAG,CAAC;KAAE;AACnE,WAAO,MAAM,CAAC;GACf;;AAED,MAAI,QAAQ,CAAC,UAAU,EAAE;AAAE,YAAQ,GAAG,QAAQ,WAAQ,CAAC;GAAE;;;AAGzD,MAAI,CAAC,IAAI,CAAC,YAAW;AACnB,QAAI,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;AAAE,YAAM,IAAI,KAAK,0BAAwB,IAAI,CAAG,CAAC;KAAE;AACxE,SAAK,CAAI,mBAAM,MAAM,CAAC,cAAc,CAAC,SAAI,IAAI,CAAG,CAAC;;AAEjD,WAAO,sBACJ,OAAO,CAAC,QAAQ,mBAAC,IAAI,SAAK,IAAI,EAAC,CAAC,CAChC,IAAI,CAAC,UAAA,GAAG,EAAI;AACX,WAAK,CAAI,mBAAM,IAAI,CAAC,WAAW,CAAC,SAAI,IAAI,CAAG,CAAC;AAC5C,UAAI,CAAC,GAAG,EAAE;AACR,cAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;OAC/D;AACD,WAAK,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;AACrB,aAAO,GAAG,CAAC;KACZ,CAAC,CAAC;GACN,CAAC,CAAC;;AAEH,SAAO,IAAI,CAAC;CACb","file":"data/source.js","sourcesContent":["/**\n * data/source.js\n *\n * @author  Denis Luchkin-Zhou <denis@ricepo.com>\n * @license MIT\n */\n\nimport Chalk       from 'chalk';\nimport Debug       from 'debug';\nimport Bluebird    from 'bluebird';\n\nconst  debug     = Debug('ignis:data:source');\n\n/*!\n * Export symbols used by source(1)\n */\nexport const __sources = Symbol('Ignis::data::sources');\n\n\n/**\n * source(1)\n *\n * @description                Connects ignis to a data-source.\n * @param          {name}      Name of the data source.\n * @param          {callback}  Callback function, which returns an object\n *                             representing the data connection; or a promise\n *                             that resolves with one.\n * @param          {args}      Arguments to pass to the callback.\n * @returns        {promise}   Promise that resolves if successful.\n */\nexport function source(name, callback, ...args) {\n  const store = this[__sources];\n\n  /* If callback is not specified, retrieve the source. */\n  if (!callback) {\n    const result = store.get(name);\n    if (!result) { throw new Error(`Data source not found: ${name}`); }\n    return result;\n  }\n\n  if (callback.__esModule) { callback = callback.default; }\n\n  /* Otherwise, create the data source */\n  this.wait(function() {\n    if (store.get(name)) { throw new Error(`Data source exists: ${name}`); }\n    debug(`${Chalk.yellow('[connecting]')} ${name}`);\n\n    return Bluebird\n      .resolve(callback(this, ...args))\n      .then(src => {\n        debug(`${Chalk.cyan('[success]')} ${name}`);\n        if (!src) {\n          throw new Error('Data source callback returned falsy value.');\n        }\n        store.set(name, src);\n        return src;\n      });\n  });\n\n  return this;\n}\n"],"sourceRoot":"/source/"}