{"version":3,"sources":["data/source.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;sBAOwB,QAAQ;;;;qBACR,OAAO;;;;wBACP,UAAU;;;;yBACV,YAAY;;AAEpC,IAAO,KAAK,GAAO,wBAAM,aAAa,CAAC,CAAC;;;;;AAKjC,IAAM,SAAS,GAAG,MAAM,CAAC,sBAAsB,CAAC,CAAC;;;;;;;;;;;;;;;AAcjD,SAAS,MAAM,CAAC,IAAI,EAAE,QAAQ,EAAW;oCAAN,IAAI;AAAJ,QAAI;;;AAC5C,MAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;;;AAG5B,MAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;AAClC,QAAI,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC7B,QAAI,CAAC,MAAM,EAAE;AAAE,YAAM,IAAI,KAAK,6BAA2B,IAAI,CAAG,CAAC;KAAE;AACnE,WAAO,MAAM,CAAC;GACf;;;AAGD,MAAI,CAAC,IAAI,CAAC,YAAW;AACnB,QAAI,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;AAAE,YAAM,IAAI,KAAK,0BAAwB,IAAI,CAAG,CAAC;KAAE;AACxE,SAAK,qCAAmC,IAAI,CAAG,CAAC;;AAEhD,WAAO,sBACJ,OAAO,CAAC,QAAQ,kBAAI,IAAI,CAAC,CAAC,CAC1B,IAAI,CAAC,UAAC,MAAM,EAAK;AAChB,WAAK,oCAAkC,IAAI,CAAG,CAAC;AAC/C,UAAI,CAAC,MAAM,EAAE;AACX,cAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;OAC/D;AACD,WAAK,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AACxB,aAAO,MAAM,CAAC;KACf,CAAC,CAAC;GACN,CAAC,CAAC;;AAEH,SAAO,IAAI,CAAC;CACb","file":"data/source.js","sourcesContent":["/**\n * data/source.js\n *\n * @author  Denis Luchkin-Zhou <denis@ricepo.com>\n * @license MIT\n */\n\nimport _           from 'lodash';\nimport Debug       from 'debug';\nimport Bluebird    from 'bluebird';\nimport { symbol }  from 'ignis-util';\n\nconst  debug     = Debug('ignis:model');\n\n/*!\n * Export symbols used by source(1)\n */\nexport const __sources = Symbol('Ignis::data::sources');\n\n\n/**\n * source(1)\n *\n * @description                Connects ignis to a data-source.\n * @param          {name}      Name of the data source.\n * @param          {callback}  Callback function, which returns an object\n *                             representing the data connection; or a promise\n *                             that resolves with one.\n * @param          {args}      Arguments to pass to the callback.\n * @returns        {promise}   Promise that resolves if successful.\n */\nexport function source(name, callback, ...args) {\n  let store = this[__sources];\n\n  /* If callback is not specified, retrieve the source. */\n  if (typeof callback !== 'function') {\n    let result = store.get(name);\n    if (!result) { throw new Error(`Data source not found: ${name}`); }\n    return result;\n  }\n\n  /* Otherwise, create the data source */\n  this.wait(function() {\n    if (store.get(name)) { throw new Error(`Data source exists: ${name}`); }\n    debug(`Ignis::source(): Connecting to ${name}`);\n\n    return Bluebird\n      .resolve(callback(...args))\n      .then((source) => {\n        debug(`Ignis::source(): Connected to ${name}`);\n        if (!source) {\n          throw new Error('Data source callback returned falsy value.');\n        }\n        store.set(name, source);\n        return source;\n      });\n  });\n\n  return this;\n}\n"],"sourceRoot":"/source/"}