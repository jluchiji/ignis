{"version":3,"sources":["core.js"],"names":[],"mappings":"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","file":"core.js","sourcesContent":["/**\n * core.js\n *\n * @author  Denis Luchkin-Zhou <denis@ricepo.com>\n * @license MIT\n */\n\nimport _           from 'lodash';\nimport Debug       from 'debug';\nimport Express     from 'express';\nimport Prequire    from 'parent-require';\nimport Bluebird    from 'bluebird';\nimport Monologue   from 'monologue.js';\n\nimport { symbol }  from 'ignis-util';\n\nconst debug = Debug('ignis:core');\n\n/*!\n * Export symbols used by Ignis class.\n */\nconst init = symbol('Ignis::core::init');\nconst exts = symbol('Ignis::core::exts');\n\n\n/**\n * IgnisApp\n *\n * @description Ignis application class.\n */\nexport default class Ignis extends Monologue {\n\n  constructor() {\n    super();\n\n    /* Set to keep track of applied initializers */\n    this[init]      = new Set();\n\n    /* Ignis application middleware management */\n    this.factories  = [ ];\n\n    /* Startup sequence root promise */\n    this.startup    = Bluebird.resolve();\n\n    /* Root express router */\n    this.root       = Express();\n\n    this.init();\n  }\n\n\n  /**\n   * init(0)\n   *\n   * @description              Runs all initializers that have not been run on\n   *                           this Ignis instance.\n   */\n  init() {\n    Ignis[init].forEach(fn => {\n      if (this[init].has(fn)) { return; }\n      this[init].add(fn);\n      fn.call(this);\n    });\n  }\n\n\n  /**\n   * wait(1)\n   *\n   * @access         public\n   * @description                Makes Ignis wait for the promise before starting.\n   * @param          {action}    Function to call and wait for.\n   * @returns        {Ignis}     Ignis instance for further chaining.\n   */\n  wait(action) {\n    debug(`Ignis::wait()`);\n    if (typeof action === 'function') {\n      this.startup = this.startup.then(i => action.call(this, this.root));\n    } else {\n      throw new Error('Cannot wait on non-function objects.');\n    }\n    return this;\n  }\n\n\n  /**\n   * listen(1)\n   *\n   * @description                Creates an Express.js application, mounts the\n   *                             root router and listens for connections on the\n   *                             specified port.\n   * @param          {port}      [Optional] Port to listen on (default: PORT)\n   * @returns        {promise}   Rejects when an error occurs.\n   */\n  listen(port) {\n    debug('Ignis::listen()');\n    if (typeof port !== 'number') { port = Number(process.env.PORT); }\n    this.wait(i =>\n      Bluebird.fromNode((done) => {\n        this.root.listen(port, done);\n      })\n      .tap(i => debug('Ignis::listen(): Ignis up and ready'))\n    );\n    return this.startup;\n  }\n\n\n  /**\n   * use(1)\n   *\n   * @access         public\n   * @description                Make Ignis use the extension.\n   * @param          {fn}        Function exported by the extension module.\n   * @returns        {Ignis}     Ignis class for further chaining.\n   */\n  use(fn) { Ignis.use.call(this, fn); }\n\n}\n\n\n/*!\n * Initializers: these are called every time an Ignis instance is created.\n */\nIgnis[init] = [ ];\n\n\n/*!\n * Extensions: tracks which extensions are already attached to the Ignis.\n */\nIgnis[exts] = new Set();\n\n\n/**\n * init(1)\n *\n * @description                Pushes the initializer callback into the Ignis\n *                             initializer stack.\n * @param          {fn}        Initializer function to push.\n */\nIgnis.init = function(fn) {\n  Ignis[init].push(fn);\n};\n\n\n/**\n * use(1)\n *\n * @access         public\n * @description                Make Ignis use the extension.\n * @param          {fn}        Function exported by the extension module.\n * @returns        {Ignis}     Ignis class for further chaining.\n */\nIgnis.use = function(fn) {\n  /* If fn is a string, load it first */\n  if (_.isString(fn)) { fn = Prequire(fn); }\n  /* Handle ES6 modules with multiple exports */\n  if (_.isObject(fn) && _.isFunction(fn.default)) { fn = fn.default; }\n  /* No-op if this extension is already attached */\n  if (Ignis[exts].has(fn)) { return Ignis; }\n  Ignis[exts].add(fn);\n  fn(Ignis);\n  if (this !== Ignis) { this.init(); }\n};\n"],"sourceRoot":"/source/"}