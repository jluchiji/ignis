{"version":3,"sources":["core.js"],"names":[],"mappings":"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","file":"core.js","sourcesContent":["/**\n * core.js\n *\n * @author  Denis Luchkin-Zhou <denis@ricepo.com>\n * @license MIT\n */\n\nimport _           from 'lodash';\nimport Debug       from 'debug';\nimport Express     from 'express';\nimport Prequire    from 'parent-require';\nimport Bluebird    from 'bluebird';\nimport Monologue   from 'monologue.js';\n\nimport { symbol }  from 'ignis-util';\n\nconst debug = Debug('ignis:core');\n\n/*!\n * Export symbols used by Ignis class.\n */\nconst init = symbol('Ignis::core::init');\nconst exts = symbol('Ignis::core::exts');\n\n\n/*!\n * Global Ignis instance.\n */\nvar   instance = null;\n\n\n/**\n * IgnisApp\n *\n * @description Ignis application class.\n */\nfunction Ignis(arg) {\n\n  /* Get/set the global instance if this is called as function */\n  if (!(this instanceof Ignis)) {\n    if (arg instanceof Ignis) { instance = arg; }\n    if (!instance) { arg = new Ignis(); }\n    return arg;\n  }\n\n  /* Otherwise, this is a class constructor. */\n  this[init]      = new Set();\n  this.root       = Express();\n  this.startup    = Bluebird.resolve();\n  this.factories  = [ ];\n\n  this.init();\n}\nIgnis.prototype = new Monologue();\nexport default Ignis;\n\n\n/**\n * init(0)\n *\n * @description              Runs all initializers that have not been run on\n *                           this Ignis instance.\n */\nIgnis.prototype.init = function() {\n  Ignis[init].forEach(fn => {\n    if (this[init].has(fn)) { return; }\n    this[init].add(fn);\n    fn.call(this);\n  });\n};\n\n\n/**\n * wait(1)\n *\n * @access         public\n * @description                Makes Ignis wait for the promise before starting.\n * @param          {action}    Function to call and wait for.\n * @returns        {Ignis}     Ignis instance for further chaining.\n */\nIgnis.prototype.wait = function(action) {\n  debug(`Ignis::wait()`);\n  if (typeof action === 'function') {\n    this.startup = this.startup.then(i => action.call(this, this.root));\n  } else {\n    throw new Error('Cannot wait on non-function objects.');\n  }\n  return this;\n};\n\n\n/**\n * listen(1)\n *\n * @description                Creates an Express.js application, mounts the\n *                             root router and listens for connections on the\n *                             specified port.\n * @param          {port}      [Optional] Port to listen on (default: PORT)\n * @returns        {promise}   Rejects when an error occurs.\n */\nIgnis.prototype.listen = function(port) {\n  debug('Ignis::listen()');\n  if (typeof port !== 'number') { port = Number(process.env.PORT); }\n  this.wait(i =>\n    Bluebird.fromNode((done) => {\n      this.root.listen(port, done);\n    })\n    .tap(i => debug('Ignis::listen(): Ignis up and ready'))\n  );\n  return this.startup;\n};\n\n\n  /**\n   * use(1)\n   *\n   * @access         public\n   * @description                Make Ignis use the extension.\n   * @param          {fn}        Function exported by the extension module.\n   * @returns        {Ignis}     Ignis class for further chaining.\n   */\nIgnis.prototype.use = function(fn) {\n  Ignis.use.call(this, fn);\n};\n\n\n\n/*!\n * Initializers: these are called every time an Ignis instance is created.\n */\nIgnis[init] = [ ];\n\n\n/*!\n * Extensions: tracks which extensions are already attached to the Ignis.\n */\nIgnis[exts] = new Set();\n\n\n/**\n * init(1)\n *\n * @description                Pushes the initializer callback into the Ignis\n *                             initializer stack.\n * @param          {fn}        Initializer function to push.\n */\nIgnis.init = function(fn) {\n  Ignis[init].push(fn);\n};\n\n\n/**\n * use(1)\n *\n * @access         public\n * @description                Make Ignis use the extension.\n * @param          {fn}        Function exported by the extension module.\n * @returns        {Ignis}     Ignis class for further chaining.\n */\nIgnis.use = function(fn) {\n  /* If fn is a string, load it first */\n  if (_.isString(fn)) { fn = Prequire(fn); }\n  /* Handle ES6 modules with multiple exports */\n  if (_.isObject(fn) && _.isFunction(fn.default)) { fn = fn.default; }\n  /* No-op if this extension is already attached */\n  if (Ignis[exts].has(fn)) { return Ignis; }\n  Ignis[exts].add(fn);\n  fn(Ignis);\n  if (this !== Ignis) { this.init(); }\n};\n"],"sourceRoot":"/source/"}