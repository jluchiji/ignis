{"version":3,"sources":["routing/mount.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;sBAQwB,QAAQ;;;;oBACR,MAAM;;;;qBACN,OAAO;;;;yBAEJ,YAAY;;AAEvC,IAAO,KAAK,GAAG,wBAAM,aAAa,CAAC,CAAC;;;;;;;;;;AAS7B,SAAS,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE;;;;;AAChC,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;;;;yBAGT,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;;;;MAArC,IAAI;MAAE,GAAG;;AACf,MAAI,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE;AAAE,UAAM,IAAI,KAAK,0BAAwB,IAAI,CAAC,IAAI,CAAG,CAAC;GAAE;;;AAG3E,KAAG,GAAG,oBAAE,SAAS,CAAC,kBAAK,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;AAC7C,OAAK,sBAAoB,IAAI,CAAC,WAAW,EAAE,SAAI,GAAG,CAAG,CAAC;;;AAGtD,MAAM,UAAU,GAAG,oBAAE,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CACvC,GAAG,CAAC,UAAA,OAAO;WAAI,OAAO,QAAO,IAAI,CAAC;GAAA,CAAC,CACnC,OAAO,EAAE,CACT,KAAK,EAAE,CAAC;;;AAGX,YAAU,CAAC,IAAI,CAAC,2BAAW,OAAO,CAAC,CAAC,CAAC;;;AAGrC,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC;AACzB,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;;AAE1C,MAAI,CAAC,MAAM,EAAE;AAAE,UAAM,IAAI,KAAK,+BAA6B,IAAI,CAAG,CAAC;GAAE;AACrE,QAAM,CAAC,IAAI,MAAA,CAAX,MAAM,GAAM,MAAM,EAAE,GAAG,4BAAK,UAAU,GAAC,CAAC;;AAExC,SAAO,IAAI,CAAC;CACb","file":"routing/mount.js","sourcesContent":["/**\n * routing/mount.js\n *\n * @author  Denis Luchkin-Zhou <denis@ricepo.com>\n * @license MIT\n */\n\n\nimport _           from 'lodash';\nimport Path        from 'path';\nimport Debug       from 'debug';\n\nimport { expressify } from 'ignis-util';\n\nconst  debug = Debug('ignis:mount');\n\n/**\n * mount(2)\n *\n * @param          {path}      Root path of the handler to mount.\n * @param          {meta}      Ignis.js request handler with metadata.\n * @return         {this}      Namespace for further chaining.\n */\nexport function mount(path, meta) {\n  const handler = meta.handler;\n\n  /* Split out the HTTP verb and URL. */\n  let [ verb, url ] = meta.path.split(' ', 2); // eslint-disable-line prefer-const\n  if (!verb || !url) { throw new Error(`Invalid mount path: ${meta.path}`); }\n\n  /* Determine where to mount the endpoint */\n  url = _.trimRight(Path.join(path, url), '/');\n  debug(`Ignis::mount(): ${verb.toUpperCase()} ${url}`);\n\n  /* Generate the middleware stack */\n  const middleware = _.chain(this.factories)\n    .map(factory => factory(this, meta))\n    .compact()\n    .value();\n\n  /* Push the handler into the middleware stack */\n  middleware.push(expressify(handler));\n\n  /* Mount the middleware stack to the root router */\n  const router = this.root;\n  const method = router[verb.toLowerCase()];\n\n  if (!method) { throw new Error(`HTTP verb not supported: ${verb}`); }\n  method.call(router, url, ...middleware);\n\n  return this;\n}\n"],"sourceRoot":"/source/"}