{"version":3,"sources":["routing/mount.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;sBAQwB,QAAQ;;;;oBACR,MAAM;;;;qBACN,OAAO;;;;qBACP,OAAO;;;;yBAEJ,YAAY;;AAEvC,IAAO,KAAK,GAAG,wBAAM,aAAa,CAAC,CAAC;;AAEpC,IAAO,MAAM,GAAG;AACd,KAAG,EAAK,mBAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;AACjC,KAAG,EAAK,mBAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;AACnC,MAAI,EAAI,mBAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;AAClC,YAAQ,mBAAM,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC;CACjC,CAAC;;;;;;;;;;AASK,SAAS,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE;;;;;AAChC,MAAI,IAAI,CAAC,UAAU,EAAE;AAAE,QAAI,GAAG,IAAI,WAAQ,CAAC;GAAE;;AAE7C,MAAM,MAAM,GAAI,IAAI,CAAC,MAAM,IAAI,GAAG,CAAC;AACnC,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;;;AAG7B,MAAM,UAAU,GAAG,oBAAE,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CACvC,GAAG,CAAC,UAAA,OAAO;WAAI,OAAO,QAAO,IAAI,CAAC;GAAA,CAAC,CACnC,OAAO,EAAE,CACT,KAAK,EAAE,CAAC;;;AAGX,MAAI,OAAO,OAAO,KAAK,UAAU,EAAE;AACjC,UAAM,IAAI,KAAK,gDACgC,OAAO,OAAO,CAAG,CAAC;GAClE;AACD,YAAU,CAAC,IAAI,CAAC,2BAAW,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;;;AAG7C,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC;;;AAGzB,MAAI,CAAC,IAAI,GAAG,oBAAE,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AACnC,MAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAA,GAAG,EAAI;qBAEH,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;;;;QAA/B,IAAI;QAAE,GAAG;;AACf,QAAI,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE;AAAE,YAAM,IAAI,KAAK,0BAAwB,GAAG,CAAG,CAAC;KAAE;;;AAGrE,OAAG,GAAG,oBAAE,SAAS,CAAC,kBAAK,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;AAC7C,QAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;;AAE1B,SAAK,EAAI,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE,CAAA,SAAI,GAAG,CAAG,CAAC;;AAEtD,QAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;AAC5B,QAAI,CAAC,MAAM,EAAE;AACX,YAAM,IAAI,KAAK,+BAA6B,IAAI,CAAC,WAAW,EAAE,CAAG,CAAC;KACnE;AACD,UAAM,CAAC,IAAI,MAAA,CAAX,MAAM,GAAM,MAAM,EAAE,GAAG,4BAAK,UAAU,GAAC,CAAC;GAEzC,CAAC,CAAC;;AAEH,SAAO,IAAI,CAAC;CACb","file":"routing/mount.js","sourcesContent":["/**\n * routing/mount.js\n *\n * @author  Denis Luchkin-Zhou <denis@ricepo.com>\n * @license MIT\n */\n\n\nimport _           from 'lodash';\nimport Path        from 'path';\nimport Chalk       from 'chalk';\nimport Debug       from 'debug';\n\nimport { expressify } from 'ignis-util';\n\nconst  debug = Debug('ignis:mount');\n\nconst  styles = {\n  get:    Chalk.bold.blue('GET   '),\n  put:    Chalk.bold.yellow('PUT   '),\n  post:   Chalk.bold.green('POST  '),\n  delete: Chalk.bold.red('DELETE')\n};\n\n/**\n * mount(2)\n *\n * @param          {path}      Root path of the handler to mount.\n * @param          {meta}      Ignis.js request handler with metadata.\n * @return         {this}      Namespace for further chaining.\n */\nexport function mount(path, meta) {\n  if (meta.__esModule) { meta = meta.default; }\n\n  const status  = meta.status || 200;\n  const handler = meta.handler;\n\n  /* Generate the middleware stack */\n  const middleware = _.chain(this.factories)\n    .map(factory => factory(this, meta))\n    .compact()\n    .value();\n\n  /* Push the handler into the middleware stack */\n  if (typeof handler !== 'function') {\n    throw new Error(\n      `Expected handler to be a function but got ${typeof handler}`);\n  }\n  middleware.push(expressify(handler, status));\n\n  /* Mount the middleware stack to the root router */\n  const router = this.root;\n\n  /* Split out the HTTP verb and URL. */\n  meta.path = _.flatten([meta.path]);\n  meta.path.forEach(uri => {\n\n    let [ verb, url ] = uri.split(' ', 2); // eslint-disable-line prefer-const\n    if (!verb || !url) { throw new Error(`Invalid mount path: ${uri}`); }\n\n    /* Determine where to mount the endpoint */\n    url = _.trimRight(Path.join(path, url), '/');\n    verb = verb.toLowerCase();\n\n    debug(`${styles[verb] || verb.toUpperCase()} ${url}`);\n\n    const method = router[verb];\n    if (!method) {\n      throw new Error(`HTTP verb not supported: ${verb.toUpperCase()}`);\n    }\n    method.call(router, url, ...middleware);\n\n  });\n\n  return this;\n}\n"],"sourceRoot":"/source/"}